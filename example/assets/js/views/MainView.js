// Generated by CoffeeScript 1.3.1
var MainView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

MainView = (function(_super) {

  __extends(MainView, _super);

  MainView.name = 'MainView';

  function MainView() {
    return MainView.__super__.constructor.apply(this, arguments);
  }

  MainView.prototype.el = '#main';

  MainView.prototype.useTapHold = true;

  MainView.prototype.holdTimer = null;

  MainView.prototype.isCanFlip = false;

  MainView.prototype.isBeginOpen = false;

  MainView.prototype.isOpened = false;

  MainView.prototype._currentLeft = 0;

  MainView.prototype._moveX = 0;

  MainView.prototype._tmpX = 0;

  MainView.prototype.swipeStart = null;

  MainView.prototype.swipeStop = null;

  MainView.prototype._swipeDirection = false;

  MainView.prototype.SCROLL_CANCEL_DURATION_THRESHOLD = 1000;

  MainView.prototype.SWIPE_FORCE_OPEN_THRESHOLD = 30;

  MainView.prototype.SWIPE_DISPATCHE_HORIZONTAL_THRESHOLD = 120;

  MainView.prototype.SWIPE_DISPATCHE_VERTICAL_THRESHOLD = 75;

  MainView.prototype.events = {
    'click nav li a': 'navClickedHandler'
  };

  MainView.prototype.initialize = function(options) {
    _.bindAll(this);
    _.extend(this, options);
    this.win = window;
    this.container = $('#container');
    this.reverse = $('#reverse');
    this.container.bind('touchstart', this.touchStart);
    if (this.useTapHold) {
      this.container.bind('touchhold', this.touchHoldHandler);
    }
    return true;
  };

  MainView.prototype.navClickedHandler = function(event) {
    var id;
    event.preventDefault();
    this.win.App.status = 'reverse';
    id = event.currentTarget.href.replace(this.win.App.HOST_NAME, '');
    this.showContent(id);
    return false;
  };

  MainView.prototype.showContent = function(id) {
    this.targetID = id;
    this.container.css({
      '-webkit-animation-name': 'flipToReverse'
    });
    this.reverse.css({
      '-webkit-animation-name': 'flipToChange'
    });
    return this.container.bind('webkitAnimationEnd', this.flipedTimerHandler);
  };

  MainView.prototype.touchStart = function(event) {
    var data;
    data = event.originalEvent;
    this.swipeStart = {
      time: (new Date()).getTime(),
      pos: [data.touches[0].pageX, data.touches[0].pageY],
      origin: $(data.target)
    };
    this._tmpX = data.touches[0].pageX;
    this.container.bind('touchmove', this.judgeSwipeStartHandler).one('touchend', this.touchEndHandler);
    this.holdTimer = setInterval(this.holdTimerHandler, 550);
    if (this.isOpened) {
      return event.preventDefault();
    }
  };

  MainView.prototype.touchHoldHandler = function(event) {
    this.container.bind('touchmove', this.touchMoveHandler);
    return this.isCanFlip = true;
  };

  MainView.prototype.judgeSwipeStartHandler = function(event) {
    var data;
    data = event.originalEvent;
    this.swipeStop = {
      time: (new Date()).getTime(),
      pos: [data.touches[0].pageX, data.touches[0].pageY]
    };
    if (Math.abs(this.swipeStart.pos[0] - this.swipeStop.pos[0]) > this.SWIPE_DISPATCHE_HORIZONTAL_THRESHOLD) {
      event.preventDefault();
    }
    if (Math.abs(this._tmpX - this.swipeStop.pos[0]) > this.SWIPE_FORCE_OPEN_THRESHOLD && Math.abs(this.swipeStart.pos[1] - this.swipeStop.pos[1]) < this.SWIPE_DISPATCHE_VERTICAL_THRESHOLD && !this.isOpened) {
      event.preventDefault();
      if (this.swipeStart.pos[0] > this.swipeStop.pos[0]) {
        this._swipeDirection = 'LEFT';
        $('#slideRight').empty();
        $('#slideLeft').empty().html('SLIDE RIGHT');
        this.doForceOpenLeftPanel();
      } else {
        this._swipeDirection = 'RIGHT';
        $('#slideLeft').empty();
        $('#slideRight').empty().html('SLIDE LEFT');
        this.doForceOpenRightPanel();
      }
      this.unbindHandlers();
      return;
    }
    return this._tmpX = this.swipeStop.pos[0];
  };

  MainView.prototype.touchEndHandler = function(event) {
    this.isCanFlip = false;
    this.isBeginOpen = false;
    this.unbindHandlers();
    this._currentLeft = parseInt(this.container.css('left').replace('px', ''));
    if (this._currentLeft === NaN) {
      this._currentLeft = 0;
    }
    if (this.isOpened) {
      this.doClose();
    } else {
      if (Math.abs(this._moveX) > 10) {
        if (this._swipeDirection === 'RIGHT') {
          if (this._currentLeft < 100) {
            this.doClose();
          } else {
            this.container.css({
              '-webkit-animation-name': 'SlideLeft'
            });
            this.container.bind('webkitAnimationEnd', this.panelOpenedHandler);
          }
        } else if (this._swipeDirection === 'LEFT') {
          if (this._currentLeft > -100) {
            this.doClose();
          } else {
            this.container.css({
              '-webkit-animation-name': 'SlideRight'
            });
            this.container.bind('webkitAnimationEnd', this.panelOpenedHandler);
          }
        }
      }
    }
  };

  /*
  	長押し状態中に動かせる
  */


  MainView.prototype.touchMoveHandler = function(event) {
    var data, tmpX;
    data = event.originalEvent;
    event.preventDefault();
    if (this.isCanFlip) {
      this.isBeginOpen = true;
      this._moveX = data.touches[0].pageX - this.swipeStart.pos[0];
      tmpX = this._currentLeft + this._moveX;
      if (tmpX < 0) {
        this._swipeDirection = 'LEFT';
        $('#slideRight').empty();
        $('#slideLeft').empty().html('SLIDE RIGHT');
      } else {
        this._swipeDirection = 'RIGHT';
        $('#slideLeft').empty();
        $('#slideRight').empty().html('SLIDE LEFT');
      }
      if (tmpX > 280) {
        tmpX = 280;
      } else if (tmpX < -280) {
        tmpX = -280;
      }
      this.container.css({
        left: tmpX
      });
    }
  };

  /*
  	長押し判定
  */


  MainView.prototype.holdTimerHandler = function() {
    clearInterval(this.holdTimer);
    this.container.trigger('touchhold');
  };

  MainView.prototype.unbindHandlers = function() {
    this.container.unbind('touchmove', this.touchMoveHandler);
    this.container.unbind('touchmove', this.judgeSwipeStartHandler);
    this.container.unbind('touchend', this.touchEndHandler);
    return this.isCanFlip = false;
  };

  MainView.prototype.doForceOpenRightPanel = function() {
    this.unbindHandlers();
    this.container.css({
      '-webkit-animation-name': 'SlideLeft'
    });
    return this.container.bind('webkitAnimationEnd', this.panelOpenedHandler);
  };

  MainView.prototype.doForceOpenLeftPanel = function() {
    this.unbindHandlers();
    this.container.css({
      '-webkit-animation-name': 'SlideRight'
    });
    return this.container.bind('webkitAnimationEnd', this.panelOpenedHandler);
  };

  MainView.prototype.doClose = function() {
    this.container.css({
      '-webkit-animation-name': 'SlideReturn'
    });
    return this.container.bind('webkitAnimationEnd', this.panelClosedHandler);
  };

  MainView.prototype.panelClosedHandler = function(event) {
    this.unbindHandlers();
    this.container.unbind('webkitAnimationEnd', this.panelClosedHandler);
    this.isOpened = false;
    this._setLeftClose();
    $('#slideLeft').empty();
    return $('#slideRight').empty();
  };

  MainView.prototype.panelOpenedHandler = function(event) {
    this.container.unbind('webkitAnimationEnd', this.panelOpenedHandler);
    this.unbindHandlers();
    this.isOpened = true;
    return this._setOpenPos();
  };

  MainView.prototype.returnIndex = function() {
    this.container.css({
      '-webkit-animation-name': 'flipToIndex'
    });
    this.reverse.css({
      '-webkit-animation-name': 'flipToBack'
    });
    return this.container.bind('webkitAnimationEnd', this.flipedBackHandler);
  };

  MainView.prototype.flipedTimerHandler = function() {
    this.container.unbind('webkitAnimationEnd', this.flipedTimerHandler);
    this._setFliped();
    if (this.win.App.status === 'index') {
      this.win.App.status = 'reverse';
      return this.win.App.show(this.targetID);
    } else {
      return this.win.App.navigate('/' + this.targetID, true);
    }
  };

  MainView.prototype.flipedBackHandler = function() {
    this.container.unbind('webkitAnimationEnd', this.flipedBackHandler);
    this._setDef();
    return this.win.App.navigate("", true);
  };

  MainView.prototype._setFliped = function() {
    this.container.css({
      '-webkit-transform': 'rotateY(180deg)',
      '-webkit-animation-name': ''
    });
    return this.reverse.css({
      '-webkit-transform': 'rotateY(0deg)',
      '-webkit-animation-name': ''
    });
  };

  MainView.prototype._setDef = function() {
    this.container.css({
      '-webkit-transform': 'rotateY(0deg)',
      '-webkit-animation-name': ''
    });
    return this.reverse.css({
      '-webkit-transform': 'rotateY(180deg)',
      '-webkit-animation-name': ''
    });
  };

  MainView.prototype._setOpenPos = function() {
    var pos;
    pos = this._swipeDirection === 'LEFT' ? -280 : 280;
    this._currentLeft = pos;
    return this.container.css({
      'left': pos,
      '-webkit-animation-name': ''
    });
  };

  MainView.prototype._setLeftClose = function() {
    this._currentLeft = 0;
    this._moveX = 0;
    this._tmpX = 0;
    this._swipeDirection = 'STOP';
    return this.container.css({
      'left': 0,
      '-webkit-animation-name': ''
    });
  };

  return MainView;

})(Backbone.View);
